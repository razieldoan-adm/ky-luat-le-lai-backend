// controllers/studentController.js
const Student = require('../models/Student');
const XLSX = require('xlsx');
const fs = require('fs');

// üìå Import danh s√°ch h·ªçc sinh t·ª´ Excel
exports.importExcel = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'Kh√¥ng c√≥ file Excel' });
    }

    // ƒê·ªçc file Excel
    const workbook = XLSX.readFile(req.file.path);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const rows = XLSX.utils.sheet_to_json(sheet);

    // X√≥a file sau khi ƒë·ªçc xong (tr√°nh r√°c)
    fs.unlinkSync(req.file.path);

    let imported = 0;

for (const r of rows) {
  // L·∫•y t√™n linh ho·∫°t (H·ªç t√™n ho·∫∑c T√™n)
  const name = (r['H·ªç t√™n'] || r['T√™n'] || '').trim();
  const className = (r['L·ªõp'] || '').trim();

  // B·ªè qua d√≤ng tr·ªëng
  if (!name || !className) continue;

  // L·∫•y SƒêT n·∫øu c√≥
  const fatherPhone = (r['SƒêT Ba'] || '').trim();
  const motherPhone = (r['SƒêT M·∫π'] || '').trim();

  // C·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi (upsert)
  await Student.findOneAndUpdate(
    { name, className },
    {
      name,
      className,
      fatherPhone,
      motherPhone
    },
    { upsert: true, new: true }
  );
  imported++;
}


    res.json({ message: 'Import th√†nh c√¥ng', count: imported });
  } catch (err) {
    console.error('L·ªói import Excel:', err);
    res.status(500).json({ error: 'L·ªói import' });
  }
};

// üìå L·∫•y danh s√°ch h·ªçc sinh theo l·ªõp
exports.getByClass = async (req, res) => {
  try {
    const { className } = req.query;
    const filter = className ? { className } : {};
    const students = await Student.find(filter).sort({ name: 1 }); // s·∫Øp x·∫øp theo t√™n
    res.json(students);
  } catch (err) {
    console.error('L·ªói getByClass:', err);
    res.status(500).json({ error: 'L·ªói l·∫•y danh s√°ch' });
  }
};

// üìå C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i cha m·∫π
exports.updatePhones = async (req, res) => {
  try {
    const updates = req.body; // [{_id, fatherPhone, motherPhone}, ...]

    for (let u of updates) {
      await Student.findByIdAndUpdate(u._id, {
        fatherPhone: u.fatherPhone || "",
        motherPhone: u.motherPhone || ""
      });
    }

    res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói updatePhones:', err);
    res.status(500).json({ error: 'L·ªói c·∫≠p nh·∫≠t' });
  }
};
// GET /api/students/search?name=abc
// controllers/studentController.js
const removeVietnameseTones = (str) => {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D")
    .replace(/[^a-zA-Z0-9\s]/g, "");
};

exports.searchStudents = async (req, res) => {
  try {
    const name = req.query.name?.trim() || '';
    const className = req.query.className?.trim() || '';

    if (!name) return res.json([]);

    // regex cho t√™n c√≥ d·∫•u
    const regex = new RegExp(name, 'i');

    // regex cho t√™n kh√¥ng d·∫•u
    const noAccent = removeVietnameseTones(name);
    const noAccentRegex = new RegExp(noAccent, 'i');

    // filter
    const filter = {
      $or: [
        { name: regex },               // so kh·ªõp t√™n g·ªëc
        { normalizedName: noAccentRegex } // so kh·ªõp t√™n kh√¥ng d·∫•u
      ]
    };

    if (className) {
      filter.className = className;
    }

    const students = await Student.find(filter).limit(10);
    res.json(students);
  } catch (err) {
    console.error('L·ªói searchStudents:', err);
    res.status(500).json({ error: 'L·ªói t√¨m ki·∫øm h·ªçc sinh' });
  }
};
