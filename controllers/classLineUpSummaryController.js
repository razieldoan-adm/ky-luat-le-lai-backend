// controllers/classLineUpSummaryController.js
const ClassLineUpSummary = require('../models/ClassLineUpSummary');
const Setting = require('../models/Setting');

// Helper: l·∫•y ƒëi·ªÉm m·∫∑c ƒë·ªãnh (th·ª≠ nhi·ªÅu t√™n tr∆∞·ªùng trong Setting, fallback = 10)
function getDefaultPenalty(setting) {
  if (!setting) return 10;
  return setting.defaultLineUpPenalty
    ?? setting.defaultViolationScore
    ?? setting.lineUpScore
    ?? 10;
}

// üîπ Ghi nh·∫≠n l·ªói x·∫øp h√†ng
exports.createRecord = async (req, res) => {
  try {
    const { className, studentName, violation, date, recorder } = req.body;

    // L·∫•y setting (n·∫øu c√≥)
    const setting = await Setting.findOne();
    const defaultPenalty = getDefaultPenalty(setting);

    const record = new ClassLineUpSummary({
      className,
      studentName: studentName || '',
      violation,
      date: date ? new Date(date) : new Date(),
      recorder: recorder || 'Gi√°m Th·ªã',
      // L∆∞u s·ªë ƒëi·ªÉm d∆∞·ªõi d·∫°ng d∆∞∆°ng ho·∫∑c √¢m t√πy b·∫°n; ·ªü UI ta hi·ªÉn th·ªã '-' n·∫øu c·∫ßn.
      scoreChange: defaultPenalty, 
    });

    await record.save();
    return res.status(201).json(record);
  } catch (err) {
    console.error('createRecord error:', err);
    return res.status(500).json({ message: 'Kh√¥ng th·ªÉ ghi nh·∫≠n vi ph·∫°m' });
  }
};

// üîπ L·∫•y danh s√°ch vi ph·∫°m trong tu·∫ßn hi·ªán t·∫°i (Tu·∫ßn: Th·ª© 2 -> CN)
exports.getWeeklySummary = async (req, res) => {
  try {
    // T√≠nh Monday v√† Sunday c·ªßa tu·∫ßn ch·ª©a ng√†y hi·ªán t·∫°i
    const today = new Date();
    const day = today.getDay(); // 0..6 (0 = Sun)
    // t√≠nh th·ª© Hai: n·∫øu sunday (0) th√¨ monday = today -6
    const diffToMonday = day === 0 ? -6 : 1 - day;
    const monday = new Date(today);
    monday.setDate(today.getDate() + diffToMonday);
    monday.setHours(0, 0, 0, 0);

    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    sunday.setHours(23, 59, 59, 999);

    const records = await ClassLineUpSummary.find({
      date: { $gte: monday, $lte: sunday },
    }).sort({ date: -1 });

    return res.json(records);
  } catch (err) {
    console.error('getWeeklySummary error:', err);
    return res.status(500).json({ message: 'L·ªói khi l·∫•y d·ªØ li·ªáu tu·∫ßn' });
  }
};

// üîπ L·∫•y t·∫•t c·∫£ b·∫£n ghi (n·∫øu c·∫ßn) ‚Äî gi·ªØ cho t∆∞∆°ng th√≠ch
exports.getAllRecords = async (req, res) => {
  try {
    const records = await ClassLineUpSummary.find().sort({ date: -1 });
    return res.json(records);
  } catch (err) {
    console.error('getAllRecords error:', err);
    return res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch' });
  }
};

// üîπ X√≥a vi ph·∫°m
exports.deleteRecord = async (req, res) => {
  try {
    const id = req.params.id;
    const record = await ClassLineUpSummary.findByIdAndDelete(id);
    if (!record) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y vi ph·∫°m' });
    return res.json({ message: 'ƒê√£ x√≥a vi ph·∫°m', deleted: record });
  } catch (err) {
    console.error('deleteRecord error:', err);
    return res.status(500).json({ message: 'Kh√¥ng th·ªÉ x√≥a vi ph·∫°m' });
  }
};
