const ClassLineUpSummary = require('../models/ClassLineUpSummary');
const Setting = require('../models/Setting');
const AcademicWeek = require('../models/AcademicWeek');
const Class = require('../models/Class');

// ‚úÖ Ghi nh·∫≠n l·ªói x·∫øp h√†ng
exports.createRecord = async (req, res) => {
  try {
    // üîπ L·∫•y ƒëi·ªÉm tr·ª´ m·∫∑c ƒë·ªãnh t·ª´ settings
    const setting = await Setting.findOne();
    const defaultScore = setting?.lineUpScore || 10; // n·∫øu ch∆∞a c·∫•u h√¨nh th√¨ m·∫∑c ƒë·ªãnh 10

    // üîπ T·∫°o m·ªõi b·∫£n ghi l·ªói
    const record = new ClassLineUpSummary({
      ...req.body,
      scoreChange: -Math.abs(defaultScore), // lu√¥n l√† ƒëi·ªÉm √¢m
    });

    await record.save();

    // üîπ (Tu·ª≥ ch·ªçn) c·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm x·∫øp h·∫°ng c·ªßa l·ªõp trong tu·∫ßn
    const classInfo = await Class.findOne({ name: req.body.className });
    if (classInfo) {
      const currentWeek = await AcademicWeek.findOne({ isCurrent: true });
      if (currentWeek) {
        // C√≥ th·ªÉ th√™m ph·∫ßn c·ªông/tr·ª´ ƒëi·ªÉm x·∫øp h·∫°ng t·∫°i ƒë√¢y
        // V√≠ d·ª•:
        // await ClassViolationScore.findOneAndUpdate(
        //   { classId: classInfo._id, weekId: currentWeek._id },
        //   { $inc: { lineupScore: record.scoreChange } },
        //   { upsert: true, new: true }
        // );
      }
    }

    res.status(201).json(record);
  } catch (err) {
    console.error('‚ùå L·ªói ghi nh·∫≠n:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ ghi nh·∫≠n vi ph·∫°m' });
  }
};

// ‚úÖ L·∫•y danh s√°ch l·ªói (l·ªçc theo tu·∫ßn ho·∫∑c to√†n b·ªô)
exports.getRecords = async (req, res) => {
  try {
    const { filter } = req.query; // filter = 'week' ho·∫∑c 'all'
    let records = [];

    if (filter === 'week') {
      // üîπ X√°c ƒë·ªãnh th·ª© Hai v√† Ch·ªß nh·∫≠t tu·∫ßn hi·ªán t·∫°i
      const today = new Date();
      const monday = new Date(today);
      monday.setDate(today.getDate() - today.getDay() + 1);
      monday.setHours(0, 0, 0, 0);
      const sunday = new Date(monday);
      sunday.setDate(monday.getDate() + 6);
      sunday.setHours(23, 59, 59, 999);

      records = await ClassLineUpSummary.find({
        date: { $gte: monday, $lte: sunday },
      }).sort({ date: -1 });
    } else {
      records = await ClassLineUpSummary.find().sort({ date: -1 });
    }

    res.json(records);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu' });
  }
};

// ‚úÖ X√≥a l·ªói
exports.deleteRecord = async (req, res) => {
  try {
    const record = await ClassLineUpSummary.findByIdAndDelete(req.params.id);
    if (!record) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y vi ph·∫°m' });
    }

    res.json({ message: 'ƒê√£ x√≥a vi ph·∫°m', deleted: record });
  } catch (err) {
    console.error('‚ùå L·ªói khi x√≥a:', err);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ x√≥a vi ph·∫°m' });
  }
};
