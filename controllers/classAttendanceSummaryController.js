// controllers/attendanceController.js
const Attendance = require("../models/ClassAttendanceSummary");
const AcademicWeek = require("../models/AcademicWeek");
const dayjs = require("dayjs");

// üß© H√†m b·ªè d·∫•u ti·∫øng Vi·ªát (chu·∫©n h√≥a t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng / d·∫•u)
function normalizeVietnamese(str = "") {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // b·ªè d·∫•u
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase()
    .trim();
}

// ‚úÖ Ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc
// ‚úÖ Ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc
exports.recordAbsence = async (req, res) => {
  try {
    const { studentId, studentName, className, grade, date, session } = req.body;

    // üîç Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!studentId || !studentName || !className || !grade || !date || !session) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
    }

    // ‚úÖ X√°c ƒë·ªãnh tu·∫ßn h·ªçc t∆∞∆°ng ·ª©ng v·ªõi ng√†y ngh·ªâ
    const formattedDate = dayjs(date).startOf("day").toDate();

    const week = await AcademicWeek.findOne({
      startDate: { $lte: formattedDate },
      endDate: { $gte: formattedDate },
    });

    if (!week) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tu·∫ßn t∆∞∆°ng ·ª©ng cho ng√†y:", date);
    }

    // ‚úÖ Ghi nh·∫≠n ho·∫∑c c·∫≠p nh·∫≠t b·∫£n ghi ngh·ªâ h·ªçc
    const record = await ClassAttendanceSummary.findOneAndUpdate(
      { studentId, date, session },
      {
        studentId,
        studentName,
        className,
        grade,
        date,
        session,
        permission: false, // m·∫∑c ƒë·ªãnh l√† kh√¥ng ph√©p
        weekNumber: week ? week.weekNumber : 0, // n·∫øu kh√¥ng t√¨m th·∫•y tu·∫ßn th√¨ g√°n 0
      },
      { upsert: true, new: true, setDefaultsOnInsert: true }
    );

    return res.status(200).json({
      message: "Ghi nh·∫≠n ngh·ªâ h·ªçc th√†nh c√¥ng.",
      record,
    });
  } catch (error) {
    console.error("‚ùå L·ªói ghi nh·∫≠n ngh·ªâ h·ªçc:", error);
    return res.status(500).json({ message: "L·ªói server khi ghi nh·∫≠n ngh·ªâ h·ªçc." });
  }
};

// ‚úÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo ng√†y
exports.getByDate = async (req, res) => {
  try {
    const { className, grade, date, search } = req.query;
    if (!className || !date) {
      return res.status(400).json({
        message: "Thi·∫øu className ho·∫∑c date.",
      });
    }

    const formattedDate = dayjs(date).format("YYYY-MM-DD");

    const filter = {
      className,
      date: formattedDate,
    };
    if (grade) filter.grade = grade;

    // N·∫øu c√≥ t√¨m ki·∫øm t√™n h·ªçc sinh
    if (search && search.trim()) {
      const keyword = normalizeVietnamese(search);
      filter.studentNameNormalized = { $regex: keyword, $options: "i" };
    }

    const records = await Attendance.find(filter).sort({
      session: 1,
      studentName: 1,
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch theo ng√†y:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc",
      error,
    });
  }
};

// ‚úÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo tu·∫ßn
exports.getByWeek = async (req, res) => {
  try {
    const { className, grade, startDate, endDate, search } = req.query;
    if (!className || !startDate || !endDate) {
      return res.status(400).json({
        message: "Thi·∫øu className, startDate ho·∫∑c endDate.",
      });
    }

    const start = dayjs(startDate).format("YYYY-MM-DD");
    const end = dayjs(endDate).format("YYYY-MM-DD");

    const filter = {
      className,
      date: { $gte: start, $lte: end },
    };
    if (grade) filter.grade = grade;

    // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa / d·∫•u
    if (search && search.trim()) {
      const keyword = normalizeVietnamese(search);
      filter.studentNameNormalized = { $regex: keyword, $options: "i" };
    }

    const records = await Attendance.find(filter).sort({
      date: 1,
      session: 1,
      studentName: 1,
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch theo tu·∫ßn:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc theo tu·∫ßn",
      error,
    });
  }
};

// ‚úÖ Duy·ªát ngh·ªâ c√≥ ph√©p (route: /api/attendance/approve/:id)
exports.approvePermission = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await Attendance.findById(id);
    if (!record)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi." });

    record.permission = true;
    await record.save();

    res.status(200).json({ message: "ƒê√£ duy·ªát ngh·ªâ c√≥ ph√©p.", record });
  } catch (error) {
    console.error("‚ùå L·ªói khi duy·ªát ngh·ªâ c√≥ ph√©p:", error);
    res.status(500).json({
      message: "L·ªói server khi duy·ªát ngh·ªâ c√≥ ph√©p",
      error,
    });
  }
};

// ‚úÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc kh√¥ng ph√©p (route: /api/attendance/unexcused)
exports.getUnexcusedAbsences = async (req, res) => {
  try {
    const { className, weekNumber, startDate, endDate } = req.query;
    const filter = { permission: false };

    if (className) filter.className = className;

    // N·∫øu c√≥ tu·∫ßn ‚Üí l·ªçc trong tu·∫ßn ƒë√≥
    if (startDate && endDate) {
      filter.date = {
        $gte: dayjs(startDate).format("YYYY-MM-DD"),
        $lte: dayjs(endDate).format("YYYY-MM-DD"),
      };
    }

    const absences = await Attendance.find(filter).sort({
      date: 1,
      session: 1,
      studentName: 1,
    });

    res.status(200).json(absences);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ngh·ªâ h·ªçc kh√¥ng ph√©p:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc kh√¥ng ph√©p",
      error,
    });
  }
};

// ‚úÖ X√°c nh·∫≠n c√≥ ph√©p (route: /api/attendance/confirm/:id)
exports.confirmPermission = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await Attendance.findById(id);
    if (!record)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi." });

    record.permission = true;
    await record.save();

    res.status(200).json({ message: "‚úÖ ƒê√£ x√°c nh·∫≠n c√≥ ph√©p.", record });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√°c nh·∫≠n c√≥ ph√©p:", error);
    res.status(500).json({
      message: "L·ªói server khi x√°c nh·∫≠n c√≥ ph√©p",
      error,
    });
  }
};
