const Attendance = require("../models/ClassAttendanceSummary");
const ClassWeeklyScore = require("../models/ClassWeeklyScore");
const Setting = require("../models/Setting");

/** üü¢ Ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc (m·∫∑c ƒë·ªãnh kh√¥ng ph√©p) */
exports.recordAttendance = async (req, res) => {
  try {
    const { studentName, studentId, className, grade, weekNumber, date } = req.body;

    if (!studentName || !className || !grade || !weekNumber) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt" });
    }

    const record = new Attendance({
      studentName,
      studentId,
      className,
      grade,
      weekNumber,
      date,
      permission: false, // m·∫∑c ƒë·ªãnh kh√¥ng ph√©p
    });

    await record.save();

    // üîÑ C·∫≠p nh·∫≠t ƒëi·ªÉm chuy√™n c·∫ßn t·ª± ƒë·ªông
    await updateWeeklyAttendanceScore(className, grade, weekNumber);

    res.status(201).json({ message: "ƒê√£ ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc (kh√¥ng ph√©p)", record });
  } catch (error) {
    console.error("‚ùå L·ªói ghi nh·∫≠n ngh·ªâ h·ªçc:", error);
    res.status(500).json({ message: "L·ªói server khi ghi nh·∫≠n ngh·ªâ h·ªçc" });
  }
};

/** üü° GVCN duy·ªát chuy·ªÉn sang ngh·ªâ c√≥ ph√©p */
exports.approvePermission = async (req, res) => {
  try {
    const { id } = req.params;
    const attendance = await Attendance.findById(id);
    if (!attendance) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ngh·ªâ h·ªçc" });
    }

    attendance.permission = true;
    await attendance.save();

    // üîÑ C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm tu·∫ßn
    await updateWeeklyAttendanceScore(attendance.className, attendance.grade, attendance.weekNumber);

    res.json({ message: "ƒê√£ duy·ªát ngh·ªâ c√≥ ph√©p cho h·ªçc sinh", attendance });
  } catch (error) {
    console.error("‚ùå L·ªói khi duy·ªát ngh·ªâ c√≥ ph√©p:", error);
    res.status(500).json({ message: "L·ªói server khi duy·ªát ngh·ªâ c√≥ ph√©p" });
  }
};

/** üìä L·∫•y danh s√°ch ngh·ªâ theo tu·∫ßn/l·ªõp */
exports.getWeeklyAttendance = async (req, res) => {
  try {
    const { className, grade, weekNumber } = req.query;

    const filter = {};
    if (className) filter.className = className;
    if (grade) filter.grade = grade;
    if (weekNumber) filter.weekNumber = weekNumber;

    const list = await Attendance.find(filter).sort({ date: 1 });

    res.json(list);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ngh·ªâ:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ" });
  }
};

/** ‚öôÔ∏è H√†m n·ªôi b·ªô - T√≠nh ƒëi·ªÉm chuy√™n c·∫ßn v√† c·∫≠p nh·∫≠t ClassWeeklyScore */
const updateWeeklyAttendanceScore = async (className, grade, weekNumber) => {
  try {
    // ƒê·∫øm s·ªë l∆∞·ª£t ngh·ªâ kh√¥ng ph√©p
    const unexcusedCount = await Attendance.countDocuments({
      className,
      grade,
      weekNumber,
      permission: false,
    });

    // L·∫•y h·ªá s·ªë ƒëi·ªÉm ph·∫°t t·ª´ Setting
    const setting = await Setting.findOne({});
    const attendanceCoefficient =
      setting?.attendanceCoefficient !== undefined ? setting.attendanceCoefficient : 5;

    // T√≠nh ƒëi·ªÉm ph·∫°t
    const attendanceScore = unexcusedCount * attendanceCoefficient;

    // C·∫≠p nh·∫≠t ClassWeeklyScore
    let weekly = await ClassWeeklyScore.findOne({ className, grade, weekNumber });

    if (!weekly) {
      weekly = new ClassWeeklyScore({ className, grade, weekNumber, attendanceScore });
    } else {
      weekly.attendanceScore = attendanceScore;
    }

    await weekly.save();
  } catch (error) {
    console.error("‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm chuy√™n c·∫ßn:", error);
  }
};

exports.getWeeklyUnexcusedAbsenceCount = async (req, res) => {
  try {
    const { className, grade, weekNumber } = req.query;
    if (!className || !grade || !weekNumber)
      return res.status(400).json({ message: "Thi·∫øu className, grade ho·∫∑c weekNumber" });

    const unexcusedCount = await Attendance.countDocuments({
      className,
      grade,
      weekNumber,
      permission: false,
    });

    res.json({ className, grade, weekNumber, unexcusedCount });
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒë·∫øm ngh·ªâ kh√¥ng ph√©p:", error);
    res.status(500).json({ message: "L·ªói server khi ƒë·∫øm ngh·ªâ kh√¥ng ph√©p" });
  }
};
