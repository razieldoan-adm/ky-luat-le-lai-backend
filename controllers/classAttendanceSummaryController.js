const ClassAttendanceSummary = require("../models/ClassAttendanceSummary");
const Student = require("../models/Student");

// üìã L·∫•y danh s√°ch h·ªçc sinh theo l·ªõp
exports.getStudentsByClass = async (req, res) => {
  try {
    const { className } = req.params;
    const students = await Student.find({ className }).select("name");
    res.json(students);
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch h·ªçc sinh:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch h·ªçc sinh" });
  }
};

// ‚ûï Ghi nh·∫≠n ngh·ªâ h·ªçc
exports.recordAttendance = async (req, res) => {
  try {
    const { className, studentName, date, session, recordedBy } = req.body;

    if (!className || !studentName || !date || !session)
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });

    const student = await Student.findOne({ name: studentName, className });

    const record = new ClassAttendanceSummary({
      className,
      studentId: student?._id,
      studentName,
      date,
      session,
      recordedBy,
      isExcused: false, // m·∫∑c ƒë·ªãnh l√† ngh·ªâ kh√¥ng ph√©p
    });

    await record.save();
    res.json(record);
  } catch (err) {
    console.error("L·ªói khi ghi nh·∫≠n ngh·ªâ h·ªçc:", err);
    res.status(500).json({ error: "L·ªói server khi ghi nh·∫≠n ngh·ªâ h·ªçc" });
  }
};

// üìÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo l·ªõp v√† ng√†y
exports.getAttendanceList = async (req, res) => {
  try {
    const { className, date } = req.query;
    const query = {};

    if (className) query.className = className;
    if (date) {
      const start = new Date(date);
      const end = new Date(date);
      end.setDate(end.getDate() + 1);
      query.date = { $gte: start, $lt: end };
    }

    const records = await ClassAttendanceSummary.find(query)
      .populate("studentId", "name")
      .sort({ date: -1 });
    res.json(records);
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch ngh·ªâ h·ªçc:", err);
    res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc" });
  }
};

// ‚ùå X√≥a b·∫£n ghi ngh·ªâ h·ªçc
exports.deleteAttendance = async (req, res) => {
  try {
    const { id } = req.params;
    await ClassAttendanceSummary.findByIdAndDelete(id);
    res.json({ message: "ƒê√£ x√≥a b·∫£n ghi th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi x√≥a b·∫£n ghi:", err);
    res.status(500).json({ error: "L·ªói server khi x√≥a b·∫£n ghi" });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ngh·ªâ c√≥ ph√©p / kh√¥ng ph√©p
exports.updateExcuseStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { isExcused } = req.body;

    const updated = await ClassAttendanceSummary.findByIdAndUpdate(
      id,
      { isExcused },
      { new: true }
    );

    if (!updated) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi" });
    res.json(updated);
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i c√≥ ph√©p:", err);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  }
};
