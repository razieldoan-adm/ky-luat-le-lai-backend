const Attendance = require("../models/ClassAttendanceSummary");
const ClassWeeklyScore = require("../models/ClassWeeklyScore");
const Setting = require("../models/Setting");
const dayjs = require("dayjs");

// üü© 1. Ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc (ng√†y t√πy ch·ªçn, m·∫∑c ƒë·ªãnh h√¥m nay)
exports.addAttendanceRecord = async (req, res) => {
  try {
    const { className, grade, studentName, date, session } = req.body;
    if (!className || !grade || !studentName || !session)
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt" });

    // n·∫øu kh√¥ng truy·ªÅn ng√†y, m·∫∑c ƒë·ªãnh l√† h√¥m nay
    const targetDate = date || dayjs().format("YYYY-MM-DD");

    // T·ª± t√≠nh weekNumber theo ng√†y (ƒë·∫£m b·∫£o ƒë·ªìng b·ªô v·ªõi h·ªá th·ªëng tu·∫ßn)
    const startOfYear = dayjs(targetDate).startOf("year");
    const weekNumber = dayjs(targetDate).diff(startOfYear, "week") + 1;

    // Ki·ªÉm tra tr√πng b·∫£n ghi
    const existing = await Attendance.findOne({
      className,
      grade,
      studentName,
      date: targetDate,
      session,
    });

    if (existing) {
      return res.status(400).json({ message: "H·ªçc sinh n√†y ƒë√£ ƒë∆∞·ª£c ghi ngh·ªâ bu·ªïi n√†y" });
    }

    const record = new Attendance({
      className,
      grade,
      studentName,
      date: targetDate,
      session,
      permission: false,
      weekNumber,
    });

    await record.save();
    res.status(201).json({ message: "ƒê√£ ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc", record });
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m ngh·ªâ h·ªçc:", error);
    res.status(500).json({ message: "L·ªói server khi th√™m ngh·ªâ h·ªçc", error });
  }
};

// üü® 2. Duy·ªát ph√©p (GVCN ho·∫∑c Gi√°m th·ªã)
exports.approveAttendance = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await Attendance.findById(id);
    if (!record) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi" });

    record.permission = true;
    await record.save();

    res.status(200).json({ message: "ƒê√£ duy·ªát ph√©p cho h·ªçc sinh", record });
  } catch (error) {
    console.error("‚ùå L·ªói khi duy·ªát ph√©p:", error);
    res.status(500).json({ message: "L·ªói server khi duy·ªát ph√©p", error });
  }
};

// üü¶ 3. L·∫•y danh s√°ch ngh·ªâ h·ªçc (ng√†y ho·∫∑c tu·∫ßn)
exports.getAttendanceList = async (req, res) => {
  try {
    const { className, viewMode, date, weekNumber } = req.query;
    let filter = {};

    if (className) filter.className = className;
    if (viewMode === "week" && weekNumber)
      filter.weekNumber = Number(weekNumber);
    else if (date)
      filter.date = date;

    const records = await Attendance.find(filter).sort({ date: -1 });
    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ngh·ªâ h·ªçc:", error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc", error });
  }
};

// üü• 4. T√≠nh ƒëi·ªÉm ph·∫°t ngh·ªâ h·ªçc kh√¥ng ph√©p trong tu·∫ßn
exports.getWeeklyUnexcusedAbsenceCount = async (req, res) => {
  try {
    const { className, grade, weekNumber } = req.query;
    if (!className || !grade || !weekNumber)
      return res.status(400).json({ message: "Thi·∫øu className, grade ho·∫∑c weekNumber" });

    const unexcusedCount = await Attendance.countDocuments({
      className,
      grade,
      weekNumber,
      permission: false,
    });

    const setting = await Setting.findOne({});
    const coef = setting?.attendanceCoefficient ?? 5;
    const violationScore = unexcusedCount * coef;

    let weekly = await ClassWeeklyScore.findOne({ className, grade, weekNumber });
    if (!weekly)
      weekly = new ClassWeeklyScore({ className, grade, weekNumber, attendanceScore: violationScore });
    else weekly.attendanceScore = violationScore;

    await weekly.save();

    res.status(200).json({
      message: "ƒê√£ t√≠nh ƒëi·ªÉm ph·∫°t ngh·ªâ h·ªçc",
      unexcusedCount,
      attendanceCoefficient: coef,
      violationScore,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t√≠nh ƒëi·ªÉm ph·∫°t:", error);
    res.status(500).json({ message: "L·ªói server khi t√≠nh ƒëi·ªÉm ph·∫°t", error });
  }
};
