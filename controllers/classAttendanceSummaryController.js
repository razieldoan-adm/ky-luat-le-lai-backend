const Attendance = require("../models/ClassAttendanceSummary");
const dayjs = require("dayjs");

// üß© H√†m b·ªè d·∫•u ti·∫øng Vi·ªát (chu·∫©n h√≥a t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng / d·∫•u)
function normalizeVietnamese(str = "") {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // b·ªè d·∫•u
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase()
    .trim();
}

// ‚úÖ Ghi nh·∫≠n h·ªçc sinh ngh·ªâ h·ªçc
exports.recordAbsence = async (req, res) => {
  try {
    const { studentId, studentName, className, grade, date, session } = req.body;

    if (!studentId || !studentName || !className || !grade || !session) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });
    }

    const formattedDate = date
      ? dayjs(date).format("YYYY-MM-DD")
      : dayjs().format("YYYY-MM-DD");

    const existing = await Attendance.findOne({
      studentId,
      date: formattedDate,
      session,
    });

    if (existing) {
      return res.status(400).json({
        message: "ƒê√£ ghi nh·∫≠n h·ªçc sinh n√†y trong bu·ªïi n√†y.",
      });
    }

    const attendance = new Attendance({
      studentId,
      studentName,
      studentNameNormalized: normalizeVietnamese(studentName),
      className,
      classNameNormalized: normalizeVietnamese(className),
      grade,
      date: formattedDate,
      session,
      permission: false,
    });

    await attendance.save();
    res.status(201).json({ message: "ƒê√£ ghi nh·∫≠n ngh·ªâ h·ªçc.", attendance });
  } catch (error) {
    console.error("‚ùå L·ªói khi ghi nh·∫≠n ngh·ªâ h·ªçc:", error);
    res.status(500).json({
      message: "L·ªói server khi ghi nh·∫≠n ngh·ªâ h·ªçc",
      error,
    });
  }
};

// ‚úÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo ng√†y
exports.getByDate = async (req, res) => {
  try {
    const { className, grade, date, search } = req.query;
    if (!className || !date) {
      return res.status(400).json({
        message: "Thi·∫øu className ho·∫∑c date.",
      });
    }

    const formattedDate = dayjs(date).format("YYYY-MM-DD");

    const filter = {
      className,
      date: formattedDate,
    };
    if (grade) filter.grade = grade;

    // N·∫øu c√≥ t√¨m ki·∫øm t√™n h·ªçc sinh
    if (search && search.trim()) {
      const keyword = normalizeVietnamese(search);
      filter.studentNameNormalized = { $regex: keyword, $options: "i" };
    }

    const records = await Attendance.find(filter).sort({
      session: 1,
      studentName: 1,
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch theo ng√†y:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc",
      error,
    });
  }
};

// ‚úÖ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo tu·∫ßn
exports.getByWeek = async (req, res) => {
  try {
    const { className, grade, startDate, endDate, search } = req.query;
    if (!className || !startDate || !endDate) {
      return res.status(400).json({
        message: "Thi·∫øu className, startDate ho·∫∑c endDate.",
      });
    }

    const start = dayjs(startDate).format("YYYY-MM-DD");
    const end = dayjs(endDate).format("YYYY-MM-DD");

    const filter = {
      className,
      date: { $gte: start, $lte: end },
    };
    if (grade) filter.grade = grade;

    // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa / d·∫•u
    if (search && search.trim()) {
      const keyword = normalizeVietnamese(search);
      filter.studentNameNormalized = { $regex: keyword, $options: "i" };
    }

    const records = await Attendance.find(filter).sort({
      date: 1,
      session: 1,
      studentName: 1,
    });

    res.status(200).json(records);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch theo tu·∫ßn:", error);
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ngh·ªâ h·ªçc theo tu·∫ßn",
      error,
    });
  }
};

// ‚úÖ Duy·ªát ngh·ªâ c√≥ ph√©p
exports.approvePermission = async (req, res) => {
  try {
    const { id } = req.params;
    const record = await Attendance.findById(id);
    if (!record)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£n ghi." });

    record.permission = true;
    await record.save();

    res.status(200).json({ message: "ƒê√£ duy·ªát ngh·ªâ c√≥ ph√©p.", record });
  } catch (error) {
    console.error("‚ùå L·ªói khi duy·ªát ngh·ªâ c√≥ ph√©p:", error);
    res.status(500).json({
      message: "L·ªói server khi duy·ªát ngh·ªâ c√≥ ph√©p",
      error,
    });
  }
};
